// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Bought extends ethereum.Event {
  get params(): Bought__Params {
    return new Bought__Params(this);
  }
}

export class Bought__Params {
  _event: Bought;

  constructor(event: Bought) {
    this._event = event;
  }

  get _itemsToBuy(): Array<Bought_itemsToBuyStruct> {
    return this._event.parameters[0].value.toTupleArray<
      Bought_itemsToBuyStruct
    >();
  }
}

export class Bought_itemsToBuyStruct extends ethereum.Tuple {
  get collection(): Address {
    return this[0].toAddress();
  }

  get ids(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get prices(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get beneficiaries(): Array<Address> {
    return this[3].toAddressArray();
  }
}

export class MetaTransactionExecuted extends ethereum.Event {
  get params(): MetaTransactionExecuted__Params {
    return new MetaTransactionExecuted__Params(this);
  }
}

export class MetaTransactionExecuted__Params {
  _event: MetaTransactionExecuted;

  constructor(event: MetaTransactionExecuted) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get relayerAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetFee extends ethereum.Event {
  get params(): SetFee__Params {
    return new SetFee__Params(this);
  }
}

export class SetFee__Params {
  _event: SetFee;

  constructor(event: SetFee) {
    this._event = event;
  }

  get _oldFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _newFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetFeeOwner extends ethereum.Event {
  get params(): SetFeeOwner__Params {
    return new SetFeeOwner__Params(this);
  }
}

export class SetFeeOwner__Params {
  _event: SetFeeOwner;

  constructor(event: SetFeeOwner) {
    this._event = event;
  }

  get _oldFeeOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newFeeOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CollectionStore__getItemBuyDataResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }
}

export class CollectionStore extends ethereum.SmartContract {
  static bind(address: Address): CollectionStore {
    return new CollectionStore("CollectionStore", address);
  }

  BASE_FEE(): BigInt {
    let result = super.call("BASE_FEE", "BASE_FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BASE_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BASE_FEE", "BASE_FEE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  acceptedToken(): Address {
    let result = super.call("acceptedToken", "acceptedToken():(address)", []);

    return result[0].toAddress();
  }

  try_acceptedToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "acceptedToken",
      "acceptedToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  domainSeparator(): Bytes {
    let result = super.call(
      "domainSeparator",
      "domainSeparator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_domainSeparator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "domainSeparator",
      "domainSeparator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  feeOwner(): Address {
    let result = super.call("feeOwner", "feeOwner():(address)", []);

    return result[0].toAddress();
  }

  try_feeOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeOwner", "feeOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getChainId(): BigInt {
    let result = super.call("getChainId", "getChainId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getChainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getChainId", "getChainId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getItemBuyData(
    _collection: Address,
    _itemId: BigInt
  ): CollectionStore__getItemBuyDataResult {
    let result = super.call(
      "getItemBuyData",
      "getItemBuyData(address,uint256):(uint256,address)",
      [
        ethereum.Value.fromAddress(_collection),
        ethereum.Value.fromUnsignedBigInt(_itemId)
      ]
    );

    return new CollectionStore__getItemBuyDataResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_getItemBuyData(
    _collection: Address,
    _itemId: BigInt
  ): ethereum.CallResult<CollectionStore__getItemBuyDataResult> {
    let result = super.tryCall(
      "getItemBuyData",
      "getItemBuyData(address,uint256):(uint256,address)",
      [
        ethereum.Value.fromAddress(_collection),
        ethereum.Value.fromUnsignedBigInt(_itemId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CollectionStore__getItemBuyDataResult(
        value[0].toBigInt(),
        value[1].toAddress()
      )
    );
  }

  getNonce(user: Address): BigInt {
    let result = super.call("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getNonce(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _acceptedToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _feeOwner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _fee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get _itemsToBuy(): Array<BuyCall_itemsToBuyStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      BuyCall_itemsToBuyStruct
    >();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}

export class BuyCall_itemsToBuyStruct extends ethereum.Tuple {
  get collection(): Address {
    return this[0].toAddress();
  }

  get ids(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get prices(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get beneficiaries(): Array<Address> {
    return this[3].toAddressArray();
  }
}

export class ExecuteMetaTransactionCall extends ethereum.Call {
  get inputs(): ExecuteMetaTransactionCall__Inputs {
    return new ExecuteMetaTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteMetaTransactionCall__Outputs {
    return new ExecuteMetaTransactionCall__Outputs(this);
  }
}

export class ExecuteMetaTransactionCall__Inputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sigR(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get sigS(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get sigV(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class ExecuteMetaTransactionCall__Outputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get _newFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class SetFeeOwnerCall extends ethereum.Call {
  get inputs(): SetFeeOwnerCall__Inputs {
    return new SetFeeOwnerCall__Inputs(this);
  }

  get outputs(): SetFeeOwnerCall__Outputs {
    return new SetFeeOwnerCall__Outputs(this);
  }
}

export class SetFeeOwnerCall__Inputs {
  _call: SetFeeOwnerCall;

  constructor(call: SetFeeOwnerCall) {
    this._call = call;
  }

  get _newFeeOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeOwnerCall__Outputs {
  _call: SetFeeOwnerCall;

  constructor(call: SetFeeOwnerCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
