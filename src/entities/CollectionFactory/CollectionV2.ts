// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddItem extends ethereum.Event {
  get params(): AddItem__Params {
    return new AddItem__Params(this);
  }
}

export class AddItem__Params {
  _event: AddItem;

  constructor(event: AddItem) {
    this._event = event;
  }

  get _itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _item(): AddItem_itemStruct {
    return changetype<AddItem_itemStruct>(
      this._event.parameters[1].value.toTuple()
    );
  }
}

export class AddItem_itemStruct extends ethereum.Tuple {
  get rarity(): string {
    return this[0].toString();
  }

  get maxSupply(): BigInt {
    return this[1].toBigInt();
  }

  get totalSupply(): BigInt {
    return this[2].toBigInt();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get beneficiary(): Address {
    return this[4].toAddress();
  }

  get metadata(): string {
    return this[5].toString();
  }

  get contentHash(): string {
    return this[6].toString();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BaseURI extends ethereum.Event {
  get params(): BaseURI__Params {
    return new BaseURI__Params(this);
  }
}

export class BaseURI__Params {
  _event: BaseURI;

  constructor(event: BaseURI) {
    this._event = event;
  }

  get _oldBaseURI(): string {
    return this._event.parameters[0].value.toString();
  }

  get _newBaseURI(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class Complete extends ethereum.Event {
  get params(): Complete__Params {
    return new Complete__Params(this);
  }
}

export class Complete__Params {
  _event: Complete;

  constructor(event: Complete) {
    this._event = event;
  }
}

export class CreatorshipTransferred extends ethereum.Event {
  get params(): CreatorshipTransferred__Params {
    return new CreatorshipTransferred__Params(this);
  }
}

export class CreatorshipTransferred__Params {
  _event: CreatorshipTransferred;

  constructor(event: CreatorshipTransferred) {
    this._event = event;
  }

  get _previousCreator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newCreator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Issue extends ethereum.Event {
  get params(): Issue__Params {
    return new Issue__Params(this);
  }
}

export class Issue__Params {
  _event: Issue;

  constructor(event: Issue) {
    this._event = event;
  }

  get _beneficiary(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _itemId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _issuedId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _caller(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class MetaTransactionExecuted extends ethereum.Event {
  get params(): MetaTransactionExecuted__Params {
    return new MetaTransactionExecuted__Params(this);
  }
}

export class MetaTransactionExecuted__Params {
  _event: MetaTransactionExecuted;

  constructor(event: MetaTransactionExecuted) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get relayerAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RescueItem extends ethereum.Event {
  get params(): RescueItem__Params {
    return new RescueItem__Params(this);
  }
}

export class RescueItem__Params {
  _event: RescueItem;

  constructor(event: RescueItem) {
    this._event = event;
  }

  get _itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _contentHash(): string {
    return this._event.parameters[1].value.toString();
  }

  get _metadata(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class SetApproved extends ethereum.Event {
  get params(): SetApproved__Params {
    return new SetApproved__Params(this);
  }
}

export class SetApproved__Params {
  _event: SetApproved;

  constructor(event: SetApproved) {
    this._event = event;
  }

  get _previousValue(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get _newValue(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class SetEditable extends ethereum.Event {
  get params(): SetEditable__Params {
    return new SetEditable__Params(this);
  }
}

export class SetEditable__Params {
  _event: SetEditable;

  constructor(event: SetEditable) {
    this._event = event;
  }

  get _previousValue(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get _newValue(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class SetGlobalManager extends ethereum.Event {
  get params(): SetGlobalManager__Params {
    return new SetGlobalManager__Params(this);
  }
}

export class SetGlobalManager__Params {
  _event: SetGlobalManager;

  constructor(event: SetGlobalManager) {
    this._event = event;
  }

  get _manager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _value(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class SetGlobalMinter extends ethereum.Event {
  get params(): SetGlobalMinter__Params {
    return new SetGlobalMinter__Params(this);
  }
}

export class SetGlobalMinter__Params {
  _event: SetGlobalMinter;

  constructor(event: SetGlobalMinter) {
    this._event = event;
  }

  get _minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _value(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class SetItemManager extends ethereum.Event {
  get params(): SetItemManager__Params {
    return new SetItemManager__Params(this);
  }
}

export class SetItemManager__Params {
  _event: SetItemManager;

  constructor(event: SetItemManager) {
    this._event = event;
  }

  get _itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _manager(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class SetItemMinter extends ethereum.Event {
  get params(): SetItemMinter__Params {
    return new SetItemMinter__Params(this);
  }
}

export class SetItemMinter__Params {
  _event: SetItemMinter;

  constructor(event: SetItemMinter) {
    this._event = event;
  }

  get _itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _minter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateItemData extends ethereum.Event {
  get params(): UpdateItemData__Params {
    return new UpdateItemData__Params(this);
  }
}

export class UpdateItemData__Params {
  _event: UpdateItemData;

  constructor(event: UpdateItemData) {
    this._event = event;
  }

  get _itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _beneficiary(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _metadata(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class CollectionV2__decodeTokenIdResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getItemId(): BigInt {
    return this.value0;
  }

  getIssuedId(): BigInt {
    return this.value1;
  }
}

export class CollectionV2__itemsResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: string;
  value6: string;

  constructor(
    value0: string,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: string,
    value6: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromString(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    return map;
  }

  getRarity(): string {
    return this.value0;
  }

  getMaxSupply(): BigInt {
    return this.value1;
  }

  getTotalSupply(): BigInt {
    return this.value2;
  }

  getPrice(): BigInt {
    return this.value3;
  }

  getBeneficiary(): Address {
    return this.value4;
  }

  getMetadata(): string {
    return this.value5;
  }

  getContentHash(): string {
    return this.value6;
  }
}

export class CollectionV2 extends ethereum.SmartContract {
  static bind(address: Address): CollectionV2 {
    return new CollectionV2("CollectionV2", address);
  }

  COLLECTION_HASH(): Bytes {
    let result = super.call(
      "COLLECTION_HASH",
      "COLLECTION_HASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_COLLECTION_HASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "COLLECTION_HASH",
      "COLLECTION_HASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ISSUED_ID_BITS(): i32 {
    let result = super.call("ISSUED_ID_BITS", "ISSUED_ID_BITS():(uint8)", []);

    return result[0].toI32();
  }

  try_ISSUED_ID_BITS(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "ISSUED_ID_BITS",
      "ISSUED_ID_BITS():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  ITEM_ID_BITS(): i32 {
    let result = super.call("ITEM_ID_BITS", "ITEM_ID_BITS():(uint8)", []);

    return result[0].toI32();
  }

  try_ITEM_ID_BITS(): ethereum.CallResult<i32> {
    let result = super.tryCall("ITEM_ID_BITS", "ITEM_ID_BITS():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  MAX_ISSUED_ID(): BigInt {
    let result = super.call("MAX_ISSUED_ID", "MAX_ISSUED_ID():(uint216)", []);

    return result[0].toBigInt();
  }

  try_MAX_ISSUED_ID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_ISSUED_ID",
      "MAX_ISSUED_ID():(uint216)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_ITEM_ID(): BigInt {
    let result = super.call("MAX_ITEM_ID", "MAX_ITEM_ID():(uint40)", []);

    return result[0].toBigInt();
  }

  try_MAX_ITEM_ID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_ITEM_ID", "MAX_ITEM_ID():(uint40)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  createdAt(): BigInt {
    let result = super.call("createdAt", "createdAt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_createdAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("createdAt", "createdAt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  creator(): Address {
    let result = super.call("creator", "creator():(address)", []);

    return result[0].toAddress();
  }

  try_creator(): ethereum.CallResult<Address> {
    let result = super.tryCall("creator", "creator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decodeTokenId(_id: BigInt): CollectionV2__decodeTokenIdResult {
    let result = super.call(
      "decodeTokenId",
      "decodeTokenId(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return new CollectionV2__decodeTokenIdResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_decodeTokenId(
    _id: BigInt
  ): ethereum.CallResult<CollectionV2__decodeTokenIdResult> {
    let result = super.tryCall(
      "decodeTokenId",
      "decodeTokenId(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CollectionV2__decodeTokenIdResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  domainSeparator(): Bytes {
    let result = super.call(
      "domainSeparator",
      "domainSeparator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_domainSeparator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "domainSeparator",
      "domainSeparator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  encodeTokenId(_itemId: BigInt, _issuedId: BigInt): BigInt {
    let result = super.call(
      "encodeTokenId",
      "encodeTokenId(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_itemId),
        ethereum.Value.fromUnsignedBigInt(_issuedId)
      ]
    );

    return result[0].toBigInt();
  }

  try_encodeTokenId(
    _itemId: BigInt,
    _issuedId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "encodeTokenId",
      "encodeTokenId(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_itemId),
        ethereum.Value.fromUnsignedBigInt(_issuedId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getChainId(): BigInt {
    let result = super.call("getChainId", "getChainId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getChainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getChainId", "getChainId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNonce(user: Address): BigInt {
    let result = super.call("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getNonce(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  globalManagers(param0: Address): boolean {
    let result = super.call(
      "globalManagers",
      "globalManagers(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_globalManagers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "globalManagers",
      "globalManagers(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  globalMinters(param0: Address): boolean {
    let result = super.call("globalMinters", "globalMinters(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_globalMinters(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "globalMinters",
      "globalMinters(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApproved(): boolean {
    let result = super.call("isApproved", "isApproved():(bool)", []);

    return result[0].toBoolean();
  }

  try_isApproved(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isApproved", "isApproved():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCompleted(): boolean {
    let result = super.call("isCompleted", "isCompleted():(bool)", []);

    return result[0].toBoolean();
  }

  try_isCompleted(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isCompleted", "isCompleted():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isEditable(): boolean {
    let result = super.call("isEditable", "isEditable():(bool)", []);

    return result[0].toBoolean();
  }

  try_isEditable(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isEditable", "isEditable():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isInitialized(): boolean {
    let result = super.call("isInitialized", "isInitialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_isInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isInitialized", "isInitialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMintingAllowed(): boolean {
    let result = super.call(
      "isMintingAllowed",
      "isMintingAllowed():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isMintingAllowed(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isMintingAllowed",
      "isMintingAllowed():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  itemManagers(param0: BigInt, param1: Address): boolean {
    let result = super.call(
      "itemManagers",
      "itemManagers(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_itemManagers(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "itemManagers",
      "itemManagers(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  itemMinters(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "itemMinters",
      "itemMinters(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_itemMinters(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "itemMinters",
      "itemMinters(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  items(param0: BigInt): CollectionV2__itemsResult {
    let result = super.call(
      "items",
      "items(uint256):(string,uint256,uint256,uint256,address,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new CollectionV2__itemsResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toString(),
      result[6].toString()
    );
  }

  try_items(param0: BigInt): ethereum.CallResult<CollectionV2__itemsResult> {
    let result = super.tryCall(
      "items",
      "items(uint256):(string,uint256,uint256,uint256,address,string,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CollectionV2__itemsResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toString(),
        value[6].toString()
      )
    );
  }

  itemsCount(): BigInt {
    let result = super.call("itemsCount", "itemsCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_itemsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("itemsCount", "itemsCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rarities(): Address {
    let result = super.call("rarities", "rarities():(address)", []);

    return result[0].toAddress();
  }

  try_rarities(): ethereum.CallResult<Address> {
    let result = super.tryCall("rarities", "rarities():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddItemsCall extends ethereum.Call {
  get inputs(): AddItemsCall__Inputs {
    return new AddItemsCall__Inputs(this);
  }

  get outputs(): AddItemsCall__Outputs {
    return new AddItemsCall__Outputs(this);
  }
}

export class AddItemsCall__Inputs {
  _call: AddItemsCall;

  constructor(call: AddItemsCall) {
    this._call = call;
  }

  get _items(): Array<AddItemsCall_itemsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      AddItemsCall_itemsStruct
    >();
  }
}

export class AddItemsCall__Outputs {
  _call: AddItemsCall;

  constructor(call: AddItemsCall) {
    this._call = call;
  }
}

export class AddItemsCall_itemsStruct extends ethereum.Tuple {
  get rarity(): string {
    return this[0].toString();
  }

  get price(): BigInt {
    return this[1].toBigInt();
  }

  get beneficiary(): Address {
    return this[2].toAddress();
  }

  get metadata(): string {
    return this[3].toString();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BatchTransferFromCall extends ethereum.Call {
  get inputs(): BatchTransferFromCall__Inputs {
    return new BatchTransferFromCall__Inputs(this);
  }

  get outputs(): BatchTransferFromCall__Outputs {
    return new BatchTransferFromCall__Outputs(this);
  }
}

export class BatchTransferFromCall__Inputs {
  _call: BatchTransferFromCall;

  constructor(call: BatchTransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class BatchTransferFromCall__Outputs {
  _call: BatchTransferFromCall;

  constructor(call: BatchTransferFromCall) {
    this._call = call;
  }
}

export class CompleteCollectionCall extends ethereum.Call {
  get inputs(): CompleteCollectionCall__Inputs {
    return new CompleteCollectionCall__Inputs(this);
  }

  get outputs(): CompleteCollectionCall__Outputs {
    return new CompleteCollectionCall__Outputs(this);
  }
}

export class CompleteCollectionCall__Inputs {
  _call: CompleteCollectionCall;

  constructor(call: CompleteCollectionCall) {
    this._call = call;
  }
}

export class CompleteCollectionCall__Outputs {
  _call: CompleteCollectionCall;

  constructor(call: CompleteCollectionCall) {
    this._call = call;
  }
}

export class EditItemsDataCall extends ethereum.Call {
  get inputs(): EditItemsDataCall__Inputs {
    return new EditItemsDataCall__Inputs(this);
  }

  get outputs(): EditItemsDataCall__Outputs {
    return new EditItemsDataCall__Outputs(this);
  }
}

export class EditItemsDataCall__Inputs {
  _call: EditItemsDataCall;

  constructor(call: EditItemsDataCall) {
    this._call = call;
  }

  get _itemIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _prices(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _beneficiaries(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get _metadatas(): Array<string> {
    return this._call.inputValues[3].value.toStringArray();
  }
}

export class EditItemsDataCall__Outputs {
  _call: EditItemsDataCall;

  constructor(call: EditItemsDataCall) {
    this._call = call;
  }
}

export class ExecuteMetaTransactionCall extends ethereum.Call {
  get inputs(): ExecuteMetaTransactionCall__Inputs {
    return new ExecuteMetaTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteMetaTransactionCall__Outputs {
    return new ExecuteMetaTransactionCall__Outputs(this);
  }
}

export class ExecuteMetaTransactionCall__Inputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sigR(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get sigS(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get sigV(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class ExecuteMetaTransactionCall__Outputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class InitImplementationCall extends ethereum.Call {
  get inputs(): InitImplementationCall__Inputs {
    return new InitImplementationCall__Inputs(this);
  }

  get outputs(): InitImplementationCall__Outputs {
    return new InitImplementationCall__Outputs(this);
  }
}

export class InitImplementationCall__Inputs {
  _call: InitImplementationCall;

  constructor(call: InitImplementationCall) {
    this._call = call;
  }
}

export class InitImplementationCall__Outputs {
  _call: InitImplementationCall;

  constructor(call: InitImplementationCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _baseURI(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _creator(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _shouldComplete(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get _isApproved(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get _rarities(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _items(): Array<InitializeCall_itemsStruct> {
    return this._call.inputValues[7].value.toTupleArray<
      InitializeCall_itemsStruct
    >();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall_itemsStruct extends ethereum.Tuple {
  get rarity(): string {
    return this[0].toString();
  }

  get price(): BigInt {
    return this[1].toBigInt();
  }

  get beneficiary(): Address {
    return this[2].toAddress();
  }

  get metadata(): string {
    return this[3].toString();
  }
}

export class IssueTokensCall extends ethereum.Call {
  get inputs(): IssueTokensCall__Inputs {
    return new IssueTokensCall__Inputs(this);
  }

  get outputs(): IssueTokensCall__Outputs {
    return new IssueTokensCall__Outputs(this);
  }
}

export class IssueTokensCall__Inputs {
  _call: IssueTokensCall;

  constructor(call: IssueTokensCall) {
    this._call = call;
  }

  get _beneficiaries(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _itemIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class IssueTokensCall__Outputs {
  _call: IssueTokensCall;

  constructor(call: IssueTokensCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RescueItemsCall extends ethereum.Call {
  get inputs(): RescueItemsCall__Inputs {
    return new RescueItemsCall__Inputs(this);
  }

  get outputs(): RescueItemsCall__Outputs {
    return new RescueItemsCall__Outputs(this);
  }
}

export class RescueItemsCall__Inputs {
  _call: RescueItemsCall;

  constructor(call: RescueItemsCall) {
    this._call = call;
  }

  get _itemIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _contentHashes(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get _metadatas(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }
}

export class RescueItemsCall__Outputs {
  _call: RescueItemsCall;

  constructor(call: RescueItemsCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetApprovedCall extends ethereum.Call {
  get inputs(): SetApprovedCall__Inputs {
    return new SetApprovedCall__Inputs(this);
  }

  get outputs(): SetApprovedCall__Outputs {
    return new SetApprovedCall__Outputs(this);
  }
}

export class SetApprovedCall__Inputs {
  _call: SetApprovedCall;

  constructor(call: SetApprovedCall) {
    this._call = call;
  }

  get _value(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetApprovedCall__Outputs {
  _call: SetApprovedCall;

  constructor(call: SetApprovedCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get _baseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetEditableCall extends ethereum.Call {
  get inputs(): SetEditableCall__Inputs {
    return new SetEditableCall__Inputs(this);
  }

  get outputs(): SetEditableCall__Outputs {
    return new SetEditableCall__Outputs(this);
  }
}

export class SetEditableCall__Inputs {
  _call: SetEditableCall;

  constructor(call: SetEditableCall) {
    this._call = call;
  }

  get _value(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetEditableCall__Outputs {
  _call: SetEditableCall;

  constructor(call: SetEditableCall) {
    this._call = call;
  }
}

export class SetItemsManagersCall extends ethereum.Call {
  get inputs(): SetItemsManagersCall__Inputs {
    return new SetItemsManagersCall__Inputs(this);
  }

  get outputs(): SetItemsManagersCall__Outputs {
    return new SetItemsManagersCall__Outputs(this);
  }
}

export class SetItemsManagersCall__Inputs {
  _call: SetItemsManagersCall;

  constructor(call: SetItemsManagersCall) {
    this._call = call;
  }

  get _itemIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _managers(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _values(): Array<boolean> {
    return this._call.inputValues[2].value.toBooleanArray();
  }
}

export class SetItemsManagersCall__Outputs {
  _call: SetItemsManagersCall;

  constructor(call: SetItemsManagersCall) {
    this._call = call;
  }
}

export class SetItemsMintersCall extends ethereum.Call {
  get inputs(): SetItemsMintersCall__Inputs {
    return new SetItemsMintersCall__Inputs(this);
  }

  get outputs(): SetItemsMintersCall__Outputs {
    return new SetItemsMintersCall__Outputs(this);
  }
}

export class SetItemsMintersCall__Inputs {
  _call: SetItemsMintersCall;

  constructor(call: SetItemsMintersCall) {
    this._call = call;
  }

  get _itemIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _minters(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _values(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class SetItemsMintersCall__Outputs {
  _call: SetItemsMintersCall;

  constructor(call: SetItemsMintersCall) {
    this._call = call;
  }
}

export class SetManagersCall extends ethereum.Call {
  get inputs(): SetManagersCall__Inputs {
    return new SetManagersCall__Inputs(this);
  }

  get outputs(): SetManagersCall__Outputs {
    return new SetManagersCall__Outputs(this);
  }
}

export class SetManagersCall__Inputs {
  _call: SetManagersCall;

  constructor(call: SetManagersCall) {
    this._call = call;
  }

  get _managers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _values(): Array<boolean> {
    return this._call.inputValues[1].value.toBooleanArray();
  }
}

export class SetManagersCall__Outputs {
  _call: SetManagersCall;

  constructor(call: SetManagersCall) {
    this._call = call;
  }
}

export class SetMintersCall extends ethereum.Call {
  get inputs(): SetMintersCall__Inputs {
    return new SetMintersCall__Inputs(this);
  }

  get outputs(): SetMintersCall__Outputs {
    return new SetMintersCall__Outputs(this);
  }
}

export class SetMintersCall__Inputs {
  _call: SetMintersCall;

  constructor(call: SetMintersCall) {
    this._call = call;
  }

  get _minters(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _values(): Array<boolean> {
    return this._call.inputValues[1].value.toBooleanArray();
  }
}

export class SetMintersCall__Outputs {
  _call: SetMintersCall;

  constructor(call: SetMintersCall) {
    this._call = call;
  }
}

export class TransferCreatorshipCall extends ethereum.Call {
  get inputs(): TransferCreatorshipCall__Inputs {
    return new TransferCreatorshipCall__Inputs(this);
  }

  get outputs(): TransferCreatorshipCall__Outputs {
    return new TransferCreatorshipCall__Outputs(this);
  }
}

export class TransferCreatorshipCall__Inputs {
  _call: TransferCreatorshipCall;

  constructor(call: TransferCreatorshipCall) {
    this._call = call;
  }

  get _newCreator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferCreatorshipCall__Outputs {
  _call: TransferCreatorshipCall;

  constructor(call: TransferCreatorshipCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
