// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Collection extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Collection entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Collection must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Collection", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Collection | null {
    return changetype<Collection | null>(store.get_in_block("Collection", id));
  }

  static load(id: string): Collection | null {
    return changetype<Collection | null>(store.get("Collection", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get items(): ItemLoader {
    return new ItemLoader("Collection", this.get("id")!.toString(), "items");
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get isCompleted(): boolean {
    let value = this.get("isCompleted");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isCompleted(value: boolean) {
    this.set("isCompleted", Value.fromBoolean(value));
  }

  get isApproved(): boolean {
    let value = this.get("isApproved");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isApproved(value: boolean) {
    this.set("isApproved", Value.fromBoolean(value));
  }

  get isEditable(): boolean {
    let value = this.get("isEditable");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isEditable(value: boolean) {
    this.set("isEditable", Value.fromBoolean(value));
  }

  get minters(): Array<string> {
    let value = this.get("minters");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set minters(value: Array<string>) {
    this.set("minters", Value.fromStringArray(value));
  }

  get managers(): Array<string> {
    let value = this.get("managers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set managers(value: Array<string>) {
    this.set("managers", Value.fromStringArray(value));
  }

  get urn(): string {
    let value = this.get("urn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set urn(value: string) {
    this.set("urn", Value.fromString(value));
  }

  get itemsCount(): i32 {
    let value = this.get("itemsCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set itemsCount(value: i32) {
    this.set("itemsCount", Value.fromI32(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get reviewedAt(): BigInt {
    let value = this.get("reviewedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set reviewedAt(value: BigInt) {
    this.set("reviewedAt", Value.fromBigInt(value));
  }

  get firstListedAt(): BigInt | null {
    let value = this.get("firstListedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set firstListedAt(value: BigInt | null) {
    if (!value) {
      this.unset("firstListedAt");
    } else {
      this.set("firstListedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get searchIsStoreMinter(): boolean {
    let value = this.get("searchIsStoreMinter");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set searchIsStoreMinter(value: boolean) {
    this.set("searchIsStoreMinter", Value.fromBoolean(value));
  }

  get searchText(): string {
    let value = this.get("searchText");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set searchText(value: string) {
    this.set("searchText", Value.fromString(value));
  }
}

export class Item extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Item entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Item must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Item", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Item | null {
    return changetype<Item | null>(store.get_in_block("Item", id));
  }

  static load(id: string): Item | null {
    return changetype<Item | null>(store.get("Item", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collection(): string {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get blockchainId(): BigInt {
    let value = this.get("blockchainId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockchainId(value: BigInt) {
    this.set("blockchainId", Value.fromBigInt(value));
  }

  get creator(): string {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get itemType(): string {
    let value = this.get("itemType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set itemType(value: string) {
    this.set("itemType", Value.fromString(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get maxSupply(): BigInt {
    let value = this.get("maxSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxSupply(value: BigInt) {
    this.set("maxSupply", Value.fromBigInt(value));
  }

  get rarity(): string {
    let value = this.get("rarity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rarity(value: string) {
    this.set("rarity", Value.fromString(value));
  }

  get creationFee(): BigInt {
    let value = this.get("creationFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set creationFee(value: BigInt) {
    this.set("creationFee", Value.fromBigInt(value));
  }

  get available(): BigInt {
    let value = this.get("available");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set available(value: BigInt) {
    this.set("available", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get beneficiary(): string {
    let value = this.get("beneficiary");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set beneficiary(value: string) {
    this.set("beneficiary", Value.fromString(value));
  }

  get contentHash(): string | null {
    let value = this.get("contentHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set contentHash(value: string | null) {
    if (!value) {
      this.unset("contentHash");
    } else {
      this.set("contentHash", Value.fromString(<string>value));
    }
  }

  get URI(): string {
    let value = this.get("URI");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set URI(value: string) {
    this.set("URI", Value.fromString(value));
  }

  get image(): string | null {
    let value = this.get("image");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set image(value: string | null) {
    if (!value) {
      this.unset("image");
    } else {
      this.set("image", Value.fromString(<string>value));
    }
  }

  get minters(): Array<string> {
    let value = this.get("minters");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set minters(value: Array<string>) {
    this.set("minters", Value.fromStringArray(value));
  }

  get managers(): Array<string> {
    let value = this.get("managers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set managers(value: Array<string>) {
    this.set("managers", Value.fromStringArray(value));
  }

  get metadata(): string | null {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadata(value: string | null) {
    if (!value) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromString(<string>value));
    }
  }

  get rawMetadata(): string {
    let value = this.get("rawMetadata");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rawMetadata(value: string) {
    this.set("rawMetadata", Value.fromString(value));
  }

  get urn(): string {
    let value = this.get("urn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set urn(value: string) {
    this.set("urn", Value.fromString(value));
  }

  get nfts(): NFTLoader {
    return new NFTLoader("Item", this.get("id")!.toString(), "nfts");
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get reviewedAt(): BigInt {
    let value = this.get("reviewedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set reviewedAt(value: BigInt) {
    this.set("reviewedAt", Value.fromBigInt(value));
  }

  get soldAt(): BigInt | null {
    let value = this.get("soldAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set soldAt(value: BigInt | null) {
    if (!value) {
      this.unset("soldAt");
    } else {
      this.set("soldAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get firstListedAt(): BigInt | null {
    let value = this.get("firstListedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set firstListedAt(value: BigInt | null) {
    if (!value) {
      this.unset("firstListedAt");
    } else {
      this.set("firstListedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get sales(): i32 {
    let value = this.get("sales");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set sales(value: i32) {
    this.set("sales", Value.fromI32(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }

  get searchText(): string | null {
    let value = this.get("searchText");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set searchText(value: string | null) {
    if (!value) {
      this.unset("searchText");
    } else {
      this.set("searchText", Value.fromString(<string>value));
    }
  }

  get searchItemType(): string | null {
    let value = this.get("searchItemType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set searchItemType(value: string | null) {
    if (!value) {
      this.unset("searchItemType");
    } else {
      this.set("searchItemType", Value.fromString(<string>value));
    }
  }

  get searchIsCollectionApproved(): boolean {
    let value = this.get("searchIsCollectionApproved");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set searchIsCollectionApproved(value: boolean) {
    this.set("searchIsCollectionApproved", Value.fromBoolean(value));
  }

  get searchIsStoreMinter(): boolean {
    let value = this.get("searchIsStoreMinter");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set searchIsStoreMinter(value: boolean) {
    this.set("searchIsStoreMinter", Value.fromBoolean(value));
  }

  get searchIsWearableHead(): boolean {
    let value = this.get("searchIsWearableHead");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set searchIsWearableHead(value: boolean) {
    this.set("searchIsWearableHead", Value.fromBoolean(value));
  }

  get searchIsWearableAccessory(): boolean {
    let value = this.get("searchIsWearableAccessory");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set searchIsWearableAccessory(value: boolean) {
    this.set("searchIsWearableAccessory", Value.fromBoolean(value));
  }

  get searchWearableCategory(): string | null {
    let value = this.get("searchWearableCategory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set searchWearableCategory(value: string | null) {
    if (!value) {
      this.unset("searchWearableCategory");
    } else {
      this.set("searchWearableCategory", Value.fromString(<string>value));
    }
  }

  get searchWearableRarity(): string | null {
    let value = this.get("searchWearableRarity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set searchWearableRarity(value: string | null) {
    if (!value) {
      this.unset("searchWearableRarity");
    } else {
      this.set("searchWearableRarity", Value.fromString(<string>value));
    }
  }

  get searchWearableBodyShapes(): Array<string> | null {
    let value = this.get("searchWearableBodyShapes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set searchWearableBodyShapes(value: Array<string> | null) {
    if (!value) {
      this.unset("searchWearableBodyShapes");
    } else {
      this.set(
        "searchWearableBodyShapes",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get searchEmoteCategory(): string | null {
    let value = this.get("searchEmoteCategory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set searchEmoteCategory(value: string | null) {
    if (!value) {
      this.unset("searchEmoteCategory");
    } else {
      this.set("searchEmoteCategory", Value.fromString(<string>value));
    }
  }

  get searchEmoteLoop(): boolean {
    let value = this.get("searchEmoteLoop");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set searchEmoteLoop(value: boolean) {
    this.set("searchEmoteLoop", Value.fromBoolean(value));
  }

  get searchEmoteRarity(): string | null {
    let value = this.get("searchEmoteRarity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set searchEmoteRarity(value: string | null) {
    if (!value) {
      this.unset("searchEmoteRarity");
    } else {
      this.set("searchEmoteRarity", Value.fromString(<string>value));
    }
  }

  get searchEmoteBodyShapes(): Array<string> | null {
    let value = this.get("searchEmoteBodyShapes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set searchEmoteBodyShapes(value: Array<string> | null) {
    if (!value) {
      this.unset("searchEmoteBodyShapes");
    } else {
      this.set(
        "searchEmoteBodyShapes",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get searchEmoteHasSound(): boolean {
    let value = this.get("searchEmoteHasSound");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set searchEmoteHasSound(value: boolean) {
    this.set("searchEmoteHasSound", Value.fromBoolean(value));
  }

  get searchEmoteHasGeometry(): boolean {
    let value = this.get("searchEmoteHasGeometry");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set searchEmoteHasGeometry(value: boolean) {
    this.set("searchEmoteHasGeometry", Value.fromBoolean(value));
  }

  get uniqueCollectors(): Array<string> {
    let value = this.get("uniqueCollectors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set uniqueCollectors(value: Array<string>) {
    this.set("uniqueCollectors", Value.fromStringArray(value));
  }

  get uniqueCollectorsTotal(): i32 {
    let value = this.get("uniqueCollectorsTotal");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set uniqueCollectorsTotal(value: i32) {
    this.set("uniqueCollectorsTotal", Value.fromI32(value));
  }
}

export class NFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NFT entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NFT must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NFT", id.toString(), this);
    }
  }

  static loadInBlock(id: string): NFT | null {
    return changetype<NFT | null>(store.get_in_block("NFT", id));
  }

  static load(id: string): NFT | null {
    return changetype<NFT | null>(store.get("NFT", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get category(): string {
    let value = this.get("category");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }

  get itemBlockchainId(): BigInt | null {
    let value = this.get("itemBlockchainId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set itemBlockchainId(value: BigInt | null) {
    if (!value) {
      this.unset("itemBlockchainId");
    } else {
      this.set("itemBlockchainId", Value.fromBigInt(<BigInt>value));
    }
  }

  get issuedId(): BigInt | null {
    let value = this.get("issuedId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set issuedId(value: BigInt | null) {
    if (!value) {
      this.unset("issuedId");
    } else {
      this.set("issuedId", Value.fromBigInt(<BigInt>value));
    }
  }

  get itemType(): string {
    let value = this.get("itemType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set itemType(value: string) {
    this.set("itemType", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get tokenURI(): string | null {
    let value = this.get("tokenURI");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenURI(value: string | null) {
    if (!value) {
      this.unset("tokenURI");
    } else {
      this.set("tokenURI", Value.fromString(<string>value));
    }
  }

  get image(): string | null {
    let value = this.get("image");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set image(value: string | null) {
    if (!value) {
      this.unset("image");
    } else {
      this.set("image", Value.fromString(<string>value));
    }
  }

  get urn(): string {
    let value = this.get("urn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set urn(value: string) {
    this.set("urn", Value.fromString(value));
  }

  get orders(): OrderLoader {
    return new OrderLoader("NFT", this.get("id")!.toString(), "orders");
  }

  get bids(): BidLoader {
    return new BidLoader("NFT", this.get("id")!.toString(), "bids");
  }

  get activeOrder(): string | null {
    let value = this.get("activeOrder");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set activeOrder(value: string | null) {
    if (!value) {
      this.unset("activeOrder");
    } else {
      this.set("activeOrder", Value.fromString(<string>value));
    }
  }

  get collection(): string {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get item(): string | null {
    let value = this.get("item");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set item(value: string | null) {
    if (!value) {
      this.unset("item");
    } else {
      this.set("item", Value.fromString(<string>value));
    }
  }

  get metadata(): string | null {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadata(value: string | null) {
    if (!value) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromString(<string>value));
    }
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get soldAt(): BigInt | null {
    let value = this.get("soldAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set soldAt(value: BigInt | null) {
    if (!value) {
      this.unset("soldAt");
    } else {
      this.set("soldAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get transferredAt(): BigInt {
    let value = this.get("transferredAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transferredAt(value: BigInt) {
    this.set("transferredAt", Value.fromBigInt(value));
  }

  get sales(): i32 {
    let value = this.get("sales");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set sales(value: i32) {
    this.set("sales", Value.fromI32(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }

  get searchText(): string | null {
    let value = this.get("searchText");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set searchText(value: string | null) {
    if (!value) {
      this.unset("searchText");
    } else {
      this.set("searchText", Value.fromString(<string>value));
    }
  }

  get searchItemType(): string | null {
    let value = this.get("searchItemType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set searchItemType(value: string | null) {
    if (!value) {
      this.unset("searchItemType");
    } else {
      this.set("searchItemType", Value.fromString(<string>value));
    }
  }

  get searchIsWearableHead(): boolean {
    let value = this.get("searchIsWearableHead");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set searchIsWearableHead(value: boolean) {
    this.set("searchIsWearableHead", Value.fromBoolean(value));
  }

  get searchIsWearableAccessory(): boolean {
    let value = this.get("searchIsWearableAccessory");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set searchIsWearableAccessory(value: boolean) {
    this.set("searchIsWearableAccessory", Value.fromBoolean(value));
  }

  get searchWearableCategory(): string | null {
    let value = this.get("searchWearableCategory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set searchWearableCategory(value: string | null) {
    if (!value) {
      this.unset("searchWearableCategory");
    } else {
      this.set("searchWearableCategory", Value.fromString(<string>value));
    }
  }

  get searchWearableRarity(): string | null {
    let value = this.get("searchWearableRarity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set searchWearableRarity(value: string | null) {
    if (!value) {
      this.unset("searchWearableRarity");
    } else {
      this.set("searchWearableRarity", Value.fromString(<string>value));
    }
  }

  get searchWearableBodyShapes(): Array<string> | null {
    let value = this.get("searchWearableBodyShapes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set searchWearableBodyShapes(value: Array<string> | null) {
    if (!value) {
      this.unset("searchWearableBodyShapes");
    } else {
      this.set(
        "searchWearableBodyShapes",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get searchEmoteCategory(): string | null {
    let value = this.get("searchEmoteCategory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set searchEmoteCategory(value: string | null) {
    if (!value) {
      this.unset("searchEmoteCategory");
    } else {
      this.set("searchEmoteCategory", Value.fromString(<string>value));
    }
  }

  get searchEmoteLoop(): boolean {
    let value = this.get("searchEmoteLoop");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set searchEmoteLoop(value: boolean) {
    this.set("searchEmoteLoop", Value.fromBoolean(value));
  }

  get searchEmoteRarity(): string | null {
    let value = this.get("searchEmoteRarity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set searchEmoteRarity(value: string | null) {
    if (!value) {
      this.unset("searchEmoteRarity");
    } else {
      this.set("searchEmoteRarity", Value.fromString(<string>value));
    }
  }

  get searchEmoteBodyShapes(): Array<string> | null {
    let value = this.get("searchEmoteBodyShapes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set searchEmoteBodyShapes(value: Array<string> | null) {
    if (!value) {
      this.unset("searchEmoteBodyShapes");
    } else {
      this.set(
        "searchEmoteBodyShapes",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get searchOrderStatus(): string | null {
    let value = this.get("searchOrderStatus");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set searchOrderStatus(value: string | null) {
    if (!value) {
      this.unset("searchOrderStatus");
    } else {
      this.set("searchOrderStatus", Value.fromString(<string>value));
    }
  }

  get searchOrderPrice(): BigInt | null {
    let value = this.get("searchOrderPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set searchOrderPrice(value: BigInt | null) {
    if (!value) {
      this.unset("searchOrderPrice");
    } else {
      this.set("searchOrderPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get searchOrderExpiresAt(): BigInt | null {
    let value = this.get("searchOrderExpiresAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set searchOrderExpiresAt(value: BigInt | null) {
    if (!value) {
      this.unset("searchOrderExpiresAt");
    } else {
      this.set("searchOrderExpiresAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get searchOrderCreatedAt(): BigInt | null {
    let value = this.get("searchOrderCreatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set searchOrderCreatedAt(value: BigInt | null) {
    if (!value) {
      this.unset("searchOrderCreatedAt");
    } else {
      this.set("searchOrderCreatedAt", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Metadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Metadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Metadata must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Metadata", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Metadata | null {
    return changetype<Metadata | null>(store.get_in_block("Metadata", id));
  }

  static load(id: string): Metadata | null {
    return changetype<Metadata | null>(store.get("Metadata", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get itemType(): string {
    let value = this.get("itemType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set itemType(value: string) {
    this.set("itemType", Value.fromString(value));
  }

  get wearable(): string | null {
    let value = this.get("wearable");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set wearable(value: string | null) {
    if (!value) {
      this.unset("wearable");
    } else {
      this.set("wearable", Value.fromString(<string>value));
    }
  }

  get emote(): string | null {
    let value = this.get("emote");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set emote(value: string | null) {
    if (!value) {
      this.unset("emote");
    } else {
      this.set("emote", Value.fromString(<string>value));
    }
  }
}

export class Wearable extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Wearable entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Wearable must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Wearable", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Wearable | null {
    return changetype<Wearable | null>(store.get_in_block("Wearable", id));
  }

  static load(id: string): Wearable | null {
    return changetype<Wearable | null>(store.get("Wearable", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get collection(): string {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get category(): string {
    let value = this.get("category");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }

  get rarity(): string {
    let value = this.get("rarity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rarity(value: string) {
    this.set("rarity", Value.fromString(value));
  }

  get bodyShapes(): Array<string> | null {
    let value = this.get("bodyShapes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bodyShapes(value: Array<string> | null) {
    if (!value) {
      this.unset("bodyShapes");
    } else {
      this.set("bodyShapes", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Emote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Emote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Emote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Emote", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Emote | null {
    return changetype<Emote | null>(store.get_in_block("Emote", id));
  }

  static load(id: string): Emote | null {
    return changetype<Emote | null>(store.get("Emote", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get collection(): string {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get category(): string {
    let value = this.get("category");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }

  get loop(): boolean {
    let value = this.get("loop");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set loop(value: boolean) {
    this.set("loop", Value.fromBoolean(value));
  }

  get rarity(): string {
    let value = this.get("rarity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set rarity(value: string) {
    this.set("rarity", Value.fromString(value));
  }

  get bodyShapes(): Array<string> | null {
    let value = this.get("bodyShapes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bodyShapes(value: Array<string> | null) {
    if (!value) {
      this.unset("bodyShapes");
    } else {
      this.set("bodyShapes", Value.fromStringArray(<Array<string>>value));
    }
  }

  get hasSound(): boolean {
    let value = this.get("hasSound");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set hasSound(value: boolean) {
    this.set("hasSound", Value.fromBoolean(value));
  }

  get hasGeometry(): boolean {
    let value = this.get("hasGeometry");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set hasGeometry(value: boolean) {
    this.set("hasGeometry", Value.fromBoolean(value));
  }
}

export class Rarity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Rarity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Rarity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Rarity", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Rarity | null {
    return changetype<Rarity | null>(store.get_in_block("Rarity", id));
  }

  static load(id: string): Rarity | null {
    return changetype<Rarity | null>(store.get("Rarity", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get maxSupply(): BigInt {
    let value = this.get("maxSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxSupply(value: BigInt) {
    this.set("maxSupply", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get currency(): string {
    let value = this.get("currency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set currency(value: string) {
    this.set("currency", Value.fromString(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Account | null {
    return changetype<Account | null>(store.get_in_block("Account", id));
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get nfts(): NFTLoader {
    return new NFTLoader("Account", this.get("id")!.toString(), "nfts");
  }

  get isCommitteeMember(): boolean {
    let value = this.get("isCommitteeMember");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isCommitteeMember(value: boolean) {
    this.set("isCommitteeMember", Value.fromBoolean(value));
  }

  get totalCurations(): i32 {
    let value = this.get("totalCurations");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set totalCurations(value: i32) {
    this.set("totalCurations", Value.fromI32(value));
  }

  get sales(): i32 {
    let value = this.get("sales");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set sales(value: i32) {
    this.set("sales", Value.fromI32(value));
  }

  get primarySales(): i32 {
    let value = this.get("primarySales");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set primarySales(value: i32) {
    this.set("primarySales", Value.fromI32(value));
  }

  get purchases(): i32 {
    let value = this.get("purchases");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set purchases(value: i32) {
    this.set("purchases", Value.fromI32(value));
  }

  get spent(): BigInt {
    let value = this.get("spent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set spent(value: BigInt) {
    this.set("spent", Value.fromBigInt(value));
  }

  get earned(): BigInt {
    let value = this.get("earned");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set earned(value: BigInt) {
    this.set("earned", Value.fromBigInt(value));
  }

  get primarySalesEarned(): BigInt {
    let value = this.get("primarySalesEarned");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set primarySalesEarned(value: BigInt) {
    this.set("primarySalesEarned", Value.fromBigInt(value));
  }

  get royalties(): BigInt {
    let value = this.get("royalties");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set royalties(value: BigInt) {
    this.set("royalties", Value.fromBigInt(value));
  }

  get uniqueAndMythicItems(): Array<string> {
    let value = this.get("uniqueAndMythicItems");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set uniqueAndMythicItems(value: Array<string>) {
    this.set("uniqueAndMythicItems", Value.fromStringArray(value));
  }

  get uniqueAndMythicItemsTotal(): i32 {
    let value = this.get("uniqueAndMythicItemsTotal");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set uniqueAndMythicItemsTotal(value: i32) {
    this.set("uniqueAndMythicItemsTotal", Value.fromI32(value));
  }

  get collections(): i32 {
    let value = this.get("collections");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set collections(value: i32) {
    this.set("collections", Value.fromI32(value));
  }

  get creatorsSupported(): Array<string> {
    let value = this.get("creatorsSupported");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set creatorsSupported(value: Array<string>) {
    this.set("creatorsSupported", Value.fromStringArray(value));
  }

  get creatorsSupportedTotal(): i32 {
    let value = this.get("creatorsSupportedTotal");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set creatorsSupportedTotal(value: i32) {
    this.set("creatorsSupportedTotal", Value.fromI32(value));
  }

  get uniqueCollectors(): Array<string> {
    let value = this.get("uniqueCollectors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set uniqueCollectors(value: Array<string>) {
    this.set("uniqueCollectors", Value.fromStringArray(value));
  }

  get uniqueCollectorsTotal(): i32 {
    let value = this.get("uniqueCollectorsTotal");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set uniqueCollectorsTotal(value: i32) {
    this.set("uniqueCollectorsTotal", Value.fromI32(value));
  }
}

export class Order extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Order entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Order must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Order", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Order | null {
    return changetype<Order | null>(store.get_in_block("Order", id));
  }

  static load(id: string): Order | null {
    return changetype<Order | null>(store.get("Order", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get marketplaceAddress(): Bytes {
    let value = this.get("marketplaceAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set marketplaceAddress(value: Bytes) {
    this.set("marketplaceAddress", Value.fromBytes(value));
  }

  get nft(): string | null {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nft(value: string | null) {
    if (!value) {
      this.unset("nft");
    } else {
      this.set("nft", Value.fromString(<string>value));
    }
  }

  get item(): string | null {
    let value = this.get("item");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set item(value: string | null) {
    if (!value) {
      this.unset("item");
    } else {
      this.set("item", Value.fromString(<string>value));
    }
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get buyer(): Bytes | null {
    let value = this.get("buyer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set buyer(value: Bytes | null) {
    if (!value) {
      this.unset("buyer");
    } else {
      this.set("buyer", Value.fromBytes(<Bytes>value));
    }
  }

  get price(): BigInt {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get expiresAt(): BigInt {
    let value = this.get("expiresAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set expiresAt(value: BigInt) {
    this.set("expiresAt", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class Bid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Bid entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Bid must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Bid", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Bid | null {
    return changetype<Bid | null>(store.get_in_block("Bid", id));
  }

  static load(id: string): Bid | null {
    return changetype<Bid | null>(store.get("Bid", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bidAddress(): Bytes {
    let value = this.get("bidAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set bidAddress(value: Bytes) {
    this.set("bidAddress", Value.fromBytes(value));
  }

  get nft(): string | null {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nft(value: string | null) {
    if (!value) {
      this.unset("nft");
    } else {
      this.set("nft", Value.fromString(<string>value));
    }
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get blockchainId(): string {
    let value = this.get("blockchainId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set blockchainId(value: string) {
    this.set("blockchainId", Value.fromString(value));
  }

  get bidder(): Bytes | null {
    let value = this.get("bidder");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set bidder(value: Bytes | null) {
    if (!value) {
      this.unset("bidder");
    } else {
      this.set("bidder", Value.fromBytes(<Bytes>value));
    }
  }

  get seller(): Bytes | null {
    let value = this.get("seller");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set seller(value: Bytes | null) {
    if (!value) {
      this.unset("seller");
    } else {
      this.set("seller", Value.fromBytes(<Bytes>value));
    }
  }

  get price(): BigInt {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get expiresAt(): BigInt {
    let value = this.get("expiresAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set expiresAt(value: BigInt) {
    this.set("expiresAt", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class Count extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Count entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Count must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Count", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Count | null {
    return changetype<Count | null>(store.get_in_block("Count", id));
  }

  static load(id: string): Count | null {
    return changetype<Count | null>(store.get("Count", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get orderTotal(): i32 {
    let value = this.get("orderTotal");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set orderTotal(value: i32) {
    this.set("orderTotal", Value.fromI32(value));
  }

  get bidTotal(): i32 {
    let value = this.get("bidTotal");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set bidTotal(value: i32) {
    this.set("bidTotal", Value.fromI32(value));
  }

  get collectionTotal(): i32 {
    let value = this.get("collectionTotal");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set collectionTotal(value: i32) {
    this.set("collectionTotal", Value.fromI32(value));
  }

  get itemTotal(): i32 {
    let value = this.get("itemTotal");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set itemTotal(value: i32) {
    this.set("itemTotal", Value.fromI32(value));
  }

  get nftTotal(): i32 {
    let value = this.get("nftTotal");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set nftTotal(value: i32) {
    this.set("nftTotal", Value.fromI32(value));
  }

  get salesTotal(): i32 {
    let value = this.get("salesTotal");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set salesTotal(value: i32) {
    this.set("salesTotal", Value.fromI32(value));
  }

  get salesManaTotal(): BigInt {
    let value = this.get("salesManaTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set salesManaTotal(value: BigInt) {
    this.set("salesManaTotal", Value.fromBigInt(value));
  }

  get primarySalesTotal(): i32 {
    let value = this.get("primarySalesTotal");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set primarySalesTotal(value: i32) {
    this.set("primarySalesTotal", Value.fromI32(value));
  }

  get primarySalesManaTotal(): BigInt {
    let value = this.get("primarySalesManaTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set primarySalesManaTotal(value: BigInt) {
    this.set("primarySalesManaTotal", Value.fromBigInt(value));
  }

  get secondarySalesTotal(): i32 {
    let value = this.get("secondarySalesTotal");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set secondarySalesTotal(value: i32) {
    this.set("secondarySalesTotal", Value.fromI32(value));
  }

  get secondarySalesManaTotal(): BigInt {
    let value = this.get("secondarySalesManaTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set secondarySalesManaTotal(value: BigInt) {
    this.set("secondarySalesManaTotal", Value.fromBigInt(value));
  }

  get royaltiesManaTotal(): BigInt {
    let value = this.get("royaltiesManaTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set royaltiesManaTotal(value: BigInt) {
    this.set("royaltiesManaTotal", Value.fromBigInt(value));
  }

  get started(): i32 {
    let value = this.get("started");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set started(value: i32) {
    this.set("started", Value.fromI32(value));
  }

  get creatorEarningsManaTotal(): BigInt {
    let value = this.get("creatorEarningsManaTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set creatorEarningsManaTotal(value: BigInt) {
    this.set("creatorEarningsManaTotal", Value.fromBigInt(value));
  }

  get daoEarningsManaTotal(): BigInt {
    let value = this.get("daoEarningsManaTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set daoEarningsManaTotal(value: BigInt) {
    this.set("daoEarningsManaTotal", Value.fromBigInt(value));
  }
}

export class Mint extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Mint entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Mint must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Mint", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Mint | null {
    return changetype<Mint | null>(store.get_in_block("Mint", id));
  }

  static load(id: string): Mint | null {
    return changetype<Mint | null>(store.get("Mint", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get item(): string {
    let value = this.get("item");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set item(value: string) {
    this.set("item", Value.fromString(value));
  }

  get nft(): string {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get creator(): string {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get beneficiary(): string {
    let value = this.get("beneficiary");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set beneficiary(value: string) {
    this.set("beneficiary", Value.fromString(value));
  }

  get minter(): string {
    let value = this.get("minter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set minter(value: string) {
    this.set("minter", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get searchPrimarySalePrice(): BigInt | null {
    let value = this.get("searchPrimarySalePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set searchPrimarySalePrice(value: BigInt | null) {
    if (!value) {
      this.unset("searchPrimarySalePrice");
    } else {
      this.set("searchPrimarySalePrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get searchContractAddress(): string {
    let value = this.get("searchContractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set searchContractAddress(value: string) {
    this.set("searchContractAddress", Value.fromString(value));
  }

  get searchItemId(): BigInt {
    let value = this.get("searchItemId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set searchItemId(value: BigInt) {
    this.set("searchItemId", Value.fromBigInt(value));
  }

  get searchTokenId(): BigInt {
    let value = this.get("searchTokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set searchTokenId(value: BigInt) {
    this.set("searchTokenId", Value.fromBigInt(value));
  }

  get searchIssuedId(): BigInt | null {
    let value = this.get("searchIssuedId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set searchIssuedId(value: BigInt | null) {
    if (!value) {
      this.unset("searchIssuedId");
    } else {
      this.set("searchIssuedId", Value.fromBigInt(<BigInt>value));
    }
  }

  get searchIsStoreMinter(): boolean {
    let value = this.get("searchIsStoreMinter");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set searchIsStoreMinter(value: boolean) {
    this.set("searchIsStoreMinter", Value.fromBoolean(value));
  }
}

export class Curation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Curation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Curation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Curation", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Curation | null {
    return changetype<Curation | null>(store.get_in_block("Curation", id));
  }

  static load(id: string): Curation | null {
    return changetype<Curation | null>(store.get("Curation", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get curator(): string {
    let value = this.get("curator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set curator(value: string) {
    this.set("curator", Value.fromString(value));
  }

  get collection(): string {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get item(): string | null {
    let value = this.get("item");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set item(value: string | null) {
    if (!value) {
      this.unset("item");
    } else {
      this.set("item", Value.fromString(<string>value));
    }
  }

  get isApproved(): boolean {
    let value = this.get("isApproved");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isApproved(value: boolean) {
    this.set("isApproved", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Sale extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Sale entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Sale must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Sale", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Sale | null {
    return changetype<Sale | null>(store.get_in_block("Sale", id));
  }

  static load(id: string): Sale | null {
    return changetype<Sale | null>(store.get("Sale", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get beneficiary(): Bytes {
    let value = this.get("beneficiary");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set beneficiary(value: Bytes) {
    this.set("beneficiary", Value.fromBytes(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get feesCollectorCut(): BigInt {
    let value = this.get("feesCollectorCut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feesCollectorCut(value: BigInt) {
    this.set("feesCollectorCut", Value.fromBigInt(value));
  }

  get feesCollector(): Bytes {
    let value = this.get("feesCollector");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set feesCollector(value: Bytes) {
    this.set("feesCollector", Value.fromBytes(value));
  }

  get royaltiesCut(): BigInt {
    let value = this.get("royaltiesCut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set royaltiesCut(value: BigInt) {
    this.set("royaltiesCut", Value.fromBigInt(value));
  }

  get royaltiesCollector(): Bytes {
    let value = this.get("royaltiesCollector");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set royaltiesCollector(value: Bytes) {
    this.set("royaltiesCollector", Value.fromBytes(value));
  }

  get item(): string {
    let value = this.get("item");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set item(value: string) {
    this.set("item", Value.fromString(value));
  }

  get nft(): string {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get searchTokenId(): BigInt {
    let value = this.get("searchTokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set searchTokenId(value: BigInt) {
    this.set("searchTokenId", Value.fromBigInt(value));
  }

  get searchItemId(): BigInt {
    let value = this.get("searchItemId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set searchItemId(value: BigInt) {
    this.set("searchItemId", Value.fromBigInt(value));
  }

  get searchCategory(): string {
    let value = this.get("searchCategory");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set searchCategory(value: string) {
    this.set("searchCategory", Value.fromString(value));
  }

  get searchContractAddress(): string {
    let value = this.get("searchContractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set searchContractAddress(value: string) {
    this.set("searchContractAddress", Value.fromString(value));
  }
}

export class AnalyticsDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AnalyticsDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AnalyticsDayData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AnalyticsDayData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AnalyticsDayData | null {
    return changetype<AnalyticsDayData | null>(
      store.get_in_block("AnalyticsDayData", id)
    );
  }

  static load(id: string): AnalyticsDayData | null {
    return changetype<AnalyticsDayData | null>(
      store.get("AnalyticsDayData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get sales(): i32 {
    let value = this.get("sales");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set sales(value: i32) {
    this.set("sales", Value.fromI32(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }

  get creatorsEarnings(): BigInt {
    let value = this.get("creatorsEarnings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set creatorsEarnings(value: BigInt) {
    this.set("creatorsEarnings", Value.fromBigInt(value));
  }

  get daoEarnings(): BigInt {
    let value = this.get("daoEarnings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set daoEarnings(value: BigInt) {
    this.set("daoEarnings", Value.fromBigInt(value));
  }
}

export class ItemsDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ItemsDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ItemsDayData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ItemsDayData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ItemsDayData | null {
    return changetype<ItemsDayData | null>(
      store.get_in_block("ItemsDayData", id)
    );
  }

  static load(id: string): ItemsDayData | null {
    return changetype<ItemsDayData | null>(store.get("ItemsDayData", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get sales(): i32 {
    let value = this.get("sales");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set sales(value: i32) {
    this.set("sales", Value.fromI32(value));
  }

  get volume(): BigInt {
    let value = this.get("volume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volume(value: BigInt) {
    this.set("volume", Value.fromBigInt(value));
  }

  get searchEmoteCategory(): string | null {
    let value = this.get("searchEmoteCategory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set searchEmoteCategory(value: string | null) {
    if (!value) {
      this.unset("searchEmoteCategory");
    } else {
      this.set("searchEmoteCategory", Value.fromString(<string>value));
    }
  }

  get searchWearableCategory(): string | null {
    let value = this.get("searchWearableCategory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set searchWearableCategory(value: string | null) {
    if (!value) {
      this.unset("searchWearableCategory");
    } else {
      this.set("searchWearableCategory", Value.fromString(<string>value));
    }
  }

  get searchRarity(): string | null {
    let value = this.get("searchRarity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set searchRarity(value: string | null) {
    if (!value) {
      this.unset("searchRarity");
    } else {
      this.set("searchRarity", Value.fromString(<string>value));
    }
  }
}

export class AccountsDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountsDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AccountsDayData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AccountsDayData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): AccountsDayData | null {
    return changetype<AccountsDayData | null>(
      store.get_in_block("AccountsDayData", id)
    );
  }

  static load(id: string): AccountsDayData | null {
    return changetype<AccountsDayData | null>(store.get("AccountsDayData", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): i32 {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set date(value: i32) {
    this.set("date", Value.fromI32(value));
  }

  get sales(): i32 {
    let value = this.get("sales");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set sales(value: i32) {
    this.set("sales", Value.fromI32(value));
  }

  get purchases(): i32 {
    let value = this.get("purchases");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set purchases(value: i32) {
    this.set("purchases", Value.fromI32(value));
  }

  get earned(): BigInt {
    let value = this.get("earned");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set earned(value: BigInt) {
    this.set("earned", Value.fromBigInt(value));
  }

  get spent(): BigInt {
    let value = this.get("spent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set spent(value: BigInt) {
    this.set("spent", Value.fromBigInt(value));
  }

  get uniqueCollectionsSales(): Array<string> {
    let value = this.get("uniqueCollectionsSales");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set uniqueCollectionsSales(value: Array<string>) {
    this.set("uniqueCollectionsSales", Value.fromStringArray(value));
  }

  get uniqueCollectors(): Array<string> {
    let value = this.get("uniqueCollectors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set uniqueCollectors(value: Array<string>) {
    this.set("uniqueCollectors", Value.fromStringArray(value));
  }

  get uniqueCollectorsTotal(): i32 {
    let value = this.get("uniqueCollectorsTotal");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set uniqueCollectorsTotal(value: i32) {
    this.set("uniqueCollectorsTotal", Value.fromI32(value));
  }

  get uniqueAndMythicItems(): Array<string> {
    let value = this.get("uniqueAndMythicItems");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set uniqueAndMythicItems(value: Array<string>) {
    this.set("uniqueAndMythicItems", Value.fromStringArray(value));
  }

  get uniqueAndMythicItemsTotal(): i32 {
    let value = this.get("uniqueAndMythicItemsTotal");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set uniqueAndMythicItemsTotal(value: i32) {
    this.set("uniqueAndMythicItemsTotal", Value.fromI32(value));
  }

  get creatorsSupported(): Array<string> {
    let value = this.get("creatorsSupported");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set creatorsSupported(value: Array<string>) {
    this.set("creatorsSupported", Value.fromStringArray(value));
  }

  get creatorsSupportedTotal(): i32 {
    let value = this.get("creatorsSupportedTotal");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set creatorsSupportedTotal(value: i32) {
    this.set("creatorsSupportedTotal", Value.fromI32(value));
  }
}

export class ItemLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Item[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Item[]>(value);
  }
}

export class NFTLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): NFT[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<NFT[]>(value);
  }
}

export class OrderLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Order[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Order[]>(value);
  }
}

export class BidLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Bid[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Bid[]>(value);
  }
}
