type Collection @entity {
  id: ID!
  items: [Item!] @derivedFrom(field: "collection")
  owner: String!
  creator: String
  name: String!
  symbol: String!
  isCompleted: Boolean
  isApproved: Boolean
  isEditable: Boolean
  minters: [String!]
  managers: [String!]
  itemsCount: Int!
  createdAt: BigInt!
}

type Item @entity {
  id: ID! # ${Collection address}_${item Id}
  collection: Collection!
  blockchainId: BigInt!
  itemType: ItemType!
  totalSupply: BigInt!
  maxSupply: BigInt!
  rarity: String!
  available: BigInt!
  price: BigInt!
  beneficiary: String!
  contentHash: Bytes
  URI: String!
  image: String
  minters: [String!]
  managers: [String!]
  metadata: Metadata
  rawMetadata: String!
  nfts: [NFT!] @derivedFrom(field: "item")

  # Searcheable fields
  searchText: String
  searchItemType: String

  ## Collection fields
  searchIsCollectionApproved: Boolean

  ## Wearables search fields
  searchIsWearableHead: Boolean
  searchIsWearableAccessory: Boolean
  searchWearableCategory: String
  searchWearableRarity: String
  searchWearableBodyShapes: [String!]
}

type NFT @entity {
  id: ID!
  tokenId: BigInt!
  contractAddress: String!
  itemBlockchainId: BigInt
  issuedId: BigInt
  itemType: ItemType!
  owner: Account!
  tokenURI: String
  image: String
  catalystPointer: String!
  urn: String! # https://github.com/decentraland/urn-resolver

  orders: [Order!] @derivedFrom(field: "nft") # History of all orders. Should only ever be ONE open order. all others must be cancelled or sold
  bids: [Bid!] @derivedFrom(field: "nft") # History of all bids.
  activeOrder: Order

  collection: Collection!
  item: Item
  metadata: Metadata

  createdAt: BigInt!
  updatedAt: BigInt!

  # Searcheable fields
  searchText: String
  searchItemType: String

  ## Wearables search fields
  searchIsWearableHead: Boolean
  searchIsWearableAccessory: Boolean
  searchWearableCategory: String
  searchWearableRarity: String
  searchWearableBodyShapes: [String!]

  ## Order search fields
  searchOrderStatus: OrderStatus
  searchOrderPrice: BigInt
  searchOrderExpiresAt: BigInt
  searchOrderCreatedAt: BigInt
}

type Metadata @entity {
  id: ID!
  itemType: ItemType!
  wearable: Wearable
}

enum ItemType @entity {
  undefined
  wearable_v1
  wearable_v2
}

type Wearable @entity {
  id: ID!
  name: String!
  description: String!
  collection: String!
  category: String!
  rarity: String!
  bodyShapes: [String!]
}

type Account @entity {
  id: ID! # ETH addr
  address: Bytes!
  nfts: [NFT!] @derivedFrom(field: "owner")
  # mana: BigInt # Amount of mana owned
}

# ---------------------------------------------------------
# Orders --------------------------------------------------
# ---------------------------------------------------------
enum OrderStatus @entity {
  open
  sold
  cancelled
}

# thegraph doesn't support nested property searches, so we're doing promoting properties
# we need from each NFT type to the Order, in order to search for them, prefixing them with search_[nft]_[prop]
type Order @entity {
  id: ID!
  nft: NFT
  nftAddress: Bytes!
  txHash: Bytes!
  owner: Bytes!
  buyer: Bytes
  price: BigInt!
  status: OrderStatus!
  blockNumber: BigInt!
  expiresAt: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

# ---------------------------------------------------------
# Bids ----------------------------------------------------
# ---------------------------------------------------------

type Bid @entity {
  id: ID!
  nft: NFT
  nftAddress: Bytes!
  blockchainId: String!
  bidder: Bytes
  seller: Bytes
  price: BigInt!
  status: OrderStatus!
  blockNumber: BigInt!
  expiresAt: BigInt!
  createdAt: BigInt!
  updatedAt: BigInt!
}

# ---------------------------------------------------------
# Counts --------------------------------------------------
# ---------------------------------------------------------

# thegraph doesn't support count operations, but we need them to paginate results
# This entity is a workaround to this issue, but it's still not enough, as we'd need counts for more complex queries
type Count @entity {
  id: ID!
  orderTotal: Int!
  collectionTotal: Int!
  itemTotal: Int!
  nftTotal: Int!
  started: Int!
}
